{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Soil Texture Processing File\"\nauthor: \"Marc Los Huertos\"\ndate: \"7/26/2016\"\noutput:\n  html_document: default\n  word_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Uploading and Downloading the Data\n\n[Database Access](http://thinkertools.org/grainsize/) \n\n\"18Pomona87\"\n\n## Reading .csv Data into R\n```{r}\nreading.source <- \"/home/CAMPUS/mwl04747/github/SOPs/32_Soil_Texture_Analysis/Data/reading.csv\"\nsample.source <- \"/home/CAMPUS/mwl04747/github/SOPs/32_Soil_Texture_Analysis/Data/sample.csv\"\nreading <- read.csv(reading.source)\nsample <- read.csv(sample.source)\n```\n\n## Check Data Importing\n```{r}\n\nhead(reading)\nhead(sample)\n```\n\n## Preprocess Sample File\n```{r preprocess}\nlibrary(mosaic)\nlibrary(dplyr)\n\nsource(\"Soil_functions/PassNo10_fun.R\")\n\nsample$passNo10Percent =PassNo10(sample$pass10, sample$totalSoil)\n\nsample %>% select(passNo10Percent, passPercent)\n\nsource(\"Soil_functions/SoilEquiv_fun.R\")\n\nsample$hygroPercent2 = hygro(sample$tinAir, sample$tinOven, sample$tinTare); head(sample)\nsample$WS_actual = WS_e(sample$tinAir, sample$tinOven, sample$tinTare, sample$actualSoil);\n\nsample$GSp = 2.65\nhead(sample)\n\nSampleParams <- sample %>% select(sampleKEY, WSe, passNo10Percent, hygroPercent2, GSp); head(SampleParams)\n  \n```\n\n## Preprocess Reading File\n\n```{r preprocess_reading}\n\n# Convert Times to Minutes\nreading$Et <- round(reading$timeElapsed * ElapsedTimeConversion(reading$timeUnit), 2); reading$Et\n\n```\n## Join SampleParams and Reading\n\nFirst, I created two files that have only a few columns each so we can test the join function.\n\n```{r joinkeyID}\nreading.select <- select(reading, sampleKEY, Et, actual, blank, temp); head(reading.select)\n\njoined2 <- left_join(SampleParams, reading.select, by = \"sampleKEY\")\n```\n\n## Loop sampleKEY to Impute Missing Temp and Blanks\n\n### Table for Alignment for Missing Hydrometer and Temperature readings\n\nWe will align missing values to closest readings: \n\n| Reading | Missing Range |\n| --------| ------------- | \n| 0       | 0-30          |\n| 60      | 31-90         |\n| 120     | 91-240        |\n| 1440    | >240          |\n\nI would like to create a more autmotic function for this, but I couldn't figure this out in an elegant way!\n\n## Using Non-Missing to Impute Missing Temp and RBlank\n\nI still believe there is a more elegant to do this, but this is better than my initial idea!\n\n### Ways to Improve the Function:\n\nFirst, we could make the function that address both missing values simultaneously. For example, impute(sampleID, parameter)...  I tried this, but ran into the problem that we use different columns that are identified in differeing ways. Perhaps, next version!\n\n```{r impute_loop}\n\njoined <- joined2[!is.na(joined2$Et),]; joined\nKEY <- unique(joined$sampleKEY); KEY\n\nKEY <- KEY[-c(1, 2, 3)]; KEY\njoined$temp2 = NA\njoined$blank2 = NA\n\n#for(i in 1:length(KEY)){\nfor(i in 1:length(KEY)){\n  # for tesing purposes... no 22\n  #i = 77\ntmp = joined[joined$sampleKEY==KEY[i],]; tmp\n\n# Temperature Imputing\ntmp$temp[is.na(tmp$temp)] <- imputeT(tmp)\njoined[joined$sampleKEY==KEY[i],]$temp2 <- tmp$temp\n\n# Reading Blank Imputing\ntmp$blank[is.na(tmp$blank)] <- imputeR(tmp)\njoined[joined$sampleKEY==KEY[i],]$blank2 <- tmp$blank\n}\n\njoined[1:30,]\njoined[31:70,]\n```\n\n## RcTest\n\nNot sure what we are doing here... Isaac, can you comment?\n\nCorrected Rc is based on the formula...\n\n\n\n```{r RcTest}\njoined$Rc <- joined$actual - (joined$blank2 - 1)\n```\n\n## Calculating K\n\n```{r calculatingK}\njoined$K <- Kfun(round(joined$temp2,0)); head(joined)\n```\n\n\n## Calculate Effective Depth\n\nEffective Depth...\n\n```{r effectivedepth}\n# For High Density Hydrometers\n# x = c(1.00, 1.07)\n# y = c(15.5, 0.6)\n\n# For H151\nx = c(1.00, 1.031)\ny = c(10.5, 2.3)\nL2coef = coef(lm(y~x))\nL1 = joined$Rc * L2coef[2] + L2coef[1]\nL2 = 14.0\nVb = 67\nA = 27.8\n\njoined$EffectiveDepth = L1 + 0.5*(L2-(Vb/A)); joined$EffectiveDepth\nrm(x, y, L2coef, L1, L2, Vb, A)\n\n```\n## Calculate D\nAccording to ASTM D422-63 the equation to calculate D (diameter in mm) can be  simplified as D = K*sqrt(L/T) where: L=effective depth (Leff), T = measurment time in min and K is the constant given in the tables that varies with temperature (already calculated).\n\n```{r}\njoined$De<-joined$K * sqrt(joined$EffectiveDepth/joined$Et)\njoined$D\n```\n\n## Calculate PF\n\nP=[(100,000/w)*G/(G-G1)]*(R-G1) (pretty sure G1=1, pretty sure R = Rc (ask marc about this one)) and G=2.65 g/cm^3 (ask marc about this one too)\n\nThe bracketed portion will be the same for all variables thus we can calculate it separately and call it p1 (1st part of equation for )\n\n```{r perfecentfiner}\njoined$W = joined$WSe/joined$passNo10Percent * 100\njoined$PF= ((100000/joined$W)*(joined$GSp/(joined$GSp-1)))*(joined$Rc - 1)\n```\n\n## Creating Figures\n\nYou can also embed plots, for example:\n\n```{r figure, echo=T}\nKEY <- unique(joined$sampleKEY)\nKEY <- KEY[-c(1:25)]\n           \nfor(i in 1:length(KEY)){\ni = 25\nwith(joined[joined$sampleKEY==KEY[i],], plot(x=log(De), y=PF, xlab=\"Log of Diameter (mm)\", ylab=\"Percent Finer\", las=1))\n}\n\n```\n\n\n\n\n\n\n\n```\n\n",
    "created" : 1471144339415.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "410860369",
    "id" : "D4A9D0C5",
    "lastKnownWriteTime" : 1471146789,
    "last_content_update" : 1471146789411,
    "path" : "~/github/SOPs/32_Soil_Texture_Analysis/testrstudio.rmd",
    "project_path" : "32_Soil_Texture_Analysis/testrstudio.rmd",
    "properties" : {
        "chunk_rendered_width" : "650",
        "last_setup_crc32" : "ee4fc88abb338d19"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}