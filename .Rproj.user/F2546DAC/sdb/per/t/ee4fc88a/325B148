{
    "collab_server" : "",
    "contents" : "% Appendix B \n\n\\subsection{Percent Passing Through No. 10 Sieve}\n<<echo=F>>=\noptions(prompt=\" \",continue=\" \")\n@\n\nUsing the function below, we can calculate the amount of soil that passed through Sieve No. 10. Once the function is call, record the results into Box 16. \n\n<<echo=T, label=passNo10>>=\nPassNo10 = function(MassPassed,Total){\n  PercentPassed = MassPassed/Total * 100\n  cat(\"Enter\", round(PercentPassed, 1), \"into Box 16\")\n}\n@\n\nThe syntax of the function requires two parameters, mass of soil passed (Box 11) and total soil used (Box 10), PassNo10(Mass of Soil Passed, Total Soil Used). \n\nFor example, if we have the mass of the soil that passed through the sieve 122 grams and we had a total to start with of 133 grams.\n\n<<>>=\nPassNo10(122, 133)\n@\n\n\\subsection{Calculating Soil Mass for Analysis}\n\nThe following function can be used to calculate the ...\n\n<<echo=T, label=soilequiv>>=\n# Function to Calculate Ws \nSoilEquiv = function(tin, airdry, ovendry, tinmass, desiredmass = 50){\nhygro = round(ovendry/airdry, 2)\nwd = (airdry - ovendry)/(ovendry-tinmass)\nWS_e = round(desiredmass * (1 + wd), 2)\noutput = data.frame(\n  Parameter = c(\"Tin ID\", \"Tin Tare Weight\", \"Mass of air-dried soil\", \n      \"Mass of oven-dried soil\", \"Hygroscopic Correction Factor\", \n      \"Desired Oven-dried Soil\", \"Effective Soil Weight (WSe)\"),\n  Value = c(tin, tinmass, airdry, ovendry, hygro, desiredmass, WS_e),\n  Box = c(12, 13, 14, 15, 17, 9, 18))\nprint(output)\n}\n@\n\nThe function (SoilEquiv) requires four parameters to run provide the output, the mass of soil to be used for the hydrometer test. This mass is the air-dried soil to be used but is equivalent to the desired oven-dried soil, is based on the hygroscopic water methods. \n\nThe function's syntax is as follows: SoilEquiv(Tin \\#, Air-Dried Mass, Oven-Dried Mass, Tin Tare, Desired Oven-Dried Soil)\n\nBelow is an example, where the $tin number = 4$, $airdry = 27.4$, $ovendry = 25.6$, $tinmass = 12.3$, $desiredmass = 50$ and as used in R: \n\n<<echo= T, label=SoilEquiv>>=\nSoilEquiv(4, 27.4, 25.6, 12.3, 50)\n@\n\n\n\\subsection{Hydrometer Correction Factor}\n\nCorrecting for the meniscus, we use our ``blank'' hydrometer readings to calculate the composite correction factor, CCF. \n\n\\begin{equation}\nR_c = R_a - (R_b - 1)\n\\end{equation}\n\nThe equation is implemented in the De function below...\n\n\n\n\\subsection{Effective Depth}\n\nWe have two hydrometer types in the lab -- and the formula to calcutate the effective depth varies based on which hydrometer we use. \n\n\\begin{equation}\n\\texttt{Effective Depth} = XXX\n\\end{equation}\n\n\\begin{table}\n\t\t\\begin{tabular}{lcl}\\hline\nHydrometer Model\t& Code for R function  \t&\t$R = f(R_a)$\t\\\\ \\hline\\hline\nHeavy Liquid\t\t\t&\t\t``HL''\t\t\t\t\t\t\t&\t$16.295 - 0.1645 * R_c$\\\\\n151H Hydrometer\t\t& \t``151H''\t\t\t\t\t\t& $234.9 + -228.X * R_c$\\\\ \\hline\n\t\t\\end{tabular}\n\t\\caption{Hydrometer Types and Effective Depth Formula}\n\t\\label{tab:HydrometerTypesAndEffectiveDepthFormula}\n\\end{table}\n\nThus, the function syntax is\n\nHydrometer = ``HL'' or Hydrometer = ``151H''\n\n\\subsection{Formatting the Data}\n\nThere are two ways to process the data. One, you can analyze the data using a calculator or use excel as a fancy calculator. Either way, we are not using the efficacy of using available software. For our analysis, we will analyze the data using R that is capable of analyzing many samples simultaneously. In order to accomplish this, we need to have the data entered in a consistent format. \n\nThus, we have created a spreadsheet or access database? for data entry or shiny apps?\n\n\\subsection{Importing data}\n\nimporting data into R is not difficult, but there are tricks. The following function, allows the data to be imported into R from a csv file. This function is used to start the analysis. \n\n<<label = import>>=\nimport = function(){\nread.csv(file.choose())\n}\n@\n\n\n\\subsection{Pre-Processing Data}\n\nSample processing...\n\nimputing missing values...\n\n\\subsection{Calculating the $D_e$ and PF w/K}\n\nBelow is the function to calculate the D and PF, where K as a constant is calculated. \n\n\\subsection{Effective Particle Diameter Size, $D_e$}\n\nThe formula is \n\n\\begin{equation}\nd_e = \\sqrt{\\frac{30 \\eta l}{980 (GS_p - GS_f)* t}}\n\\end{equation}\n\nOnce the data have been inspected for integrity, we can use the following function to calculate the two values of interest: $D_e$ and PF. \n\n<<label = Defunction, Echo=T>>=\n\nSampleParams = data.frame(Ws_actual = 50, Hygro = .95, GSp = 2.65); SampleParams\n\n# Fill In Missing Values and Convert Times\ntmp1 = import\ntmp1$time[tmp1$Time_Units == \"s\"]=tmp1$Time[tmp1$Time_Units == \"s\"]/60; tmp1\ntmp1$time[tmp1$Time_Units == \"m\"]=tmp1$Time[tmp1$Time_Units == \"m\"]; tmp1\n\n\nTempNew = approx(tmp1$time, y = tmp1$Temp, xout = tmp1$time, method = \"linear\",\n          yleft=NA, yright=NA, rule = 1, f = 0, ties = mean); TempNew$y\ntmp1$temp = TempNew$y\n\nRblankNew = approx(tmp1$time, y = tmp1$Rblank, xout = tmp1$time, method = \"linear\",\n                 yleft=NA, yright=NA, rule = 1, f = 0, ties = mean); RblankNew$y\ntmp1$Rblank2 = RblankNew$y\n\n# Remove 0 second readings\ntmp2 <- subset(tmp1, time > 0, select=-c(Temp, Rblank, Time, Time_Units)); tmp2\n\n# Meniscus Correction Factor\ntmp2$Rc <- tmp2$Ractual - (tmp2$Rblank2 - 1); tmp2\n\n# K Value\n# Calculating K\nKfun <- function(T=22, GSp = 2.65){\n  ifelse(T < 0, NA, \n  ifelse(T  == 20, 0.01365, \n  ifelse(T  == 21, 0.01348, \n  ifelse(T  == 22, 0.01332,\n  ifelse(T  == 23, 0.01317,\n  ifelse(T  == 24, 0.01301,\n  ifelse(T  == 25, 0.01289,\n  ifelse(T > 25, NA, NA))))))))\n}\n\ntmp2$K <- Kfun(round(tmp2$temp,0)); tmp2\n\n# Hydrometer Type Option -- Effective Depth Calculation\n\n# Effective Depth Calcs for ``Heavy Liquid'' hydrometer\nx = c(1.00, 1.07); y = c(15.5, 0.6)\nL2coef = coef(lm(y~x))\n\n# Parameter for equation\nL2 = 14.5; Vb = 40; A = 27.8\n\nL1 = tmp2$Rc * L2coef[2] + L2coef[1]\ntmp2$l = L1 + 0.5*(L2-(Vb/A)); tmp2$l\n\ntmp2$EffectiveDepth[tmp2Hydrometer = ``HL''] =\ntmp2$l = 16.295 - 0.1645 * tmp2$Rc; tmp2\n\nx = c(1.00, 1.07)\ny = c(15.5, 0.6)\n\nL2coef = coef(lm(y~x))\n\n\ntmp2$Rc\nL1 = tmp2$Rc * L2coef[2] + L2coef[1]\nL2 = 14.5\nVb = 40\nA = 27.8\ntmp2$l = L1 + 0.5*(L2-(Vb/A)); tmp2$l\n\n\ntmp2$De = tmp2$K*sqrt(tmp2$l/tmp2$time); tmp2\n\nGSw = 1\ntmp2$PF = 100000/SampleParams$Ws_actual * (SampleParams$GSp/(SampleParams$GSp-GSw))*(tmp2$Rc - GSw);tmp2 \n@\n\n<<>>=\nGSp = 2.65\nGSf = 1\nt = c(0.5, 1, 3, 10, 30, 60, 90, 120, 1440)\n#c(2, 5, 15, 30, 60, 250, 1440)\nL1 = c(1.01, 1.01, 1.008, 1.007, 1.007, 1.0065, 1.0065, 1.0064, 1.0055)\n\n# Heavy Density Hydrometer\nVb = 40\nA = 27.8\nL2 = 14.5\n\neffective_depth = L1 + 0.5*(L2 - Vb/A) # result in centimeters\n\nC1 = 0.01732483379693\nC2 = -5.04157465609E-4\nC3 = 8.387438669317E-6\nC4 = -7.401129271698E-8\nC5 = 2.625994080072E-12\n\neta = C1 + T * (C2 + T * (C3 + T *  (C4 + T * C5)))\n\nd_e = sqrt((30 * eta * effective_depth)/((980*GSp - GSf) *t)); d_e\n\n#{\\frac{30 \\eta l}{980 (GS_p - GS_f)* t}}\n\n@\n\n\\begin{equation}\nPF = [(100,000/M_s)[m|5]P5 \\frac{GS_p}{GS_p - GS_w}](R_c - GS_w)\n\\end{equation}\n\n<<label = pf >>=\nM_s = 60\n\nPF = 100000/M_s * (GSp)/(GSp-GSf)*(L1 - GSf); PF\nplot(d_e, PF)\n@\n\n\\subsection{Determine the Texture Classification}\n\n\\subsection{Program to Process Multiple Samples}\n\nTo process the analysis, we need to create a standardized electronic data entry template that can later be read by R, which will conduct the analysis above. R can be used to automate the analysis and process multiple samples at the same time. Below is the program that I have developed for this purpose. \n\nFirst, use the data entry template...\n\n \n\nwhere $M_s$ = a biased soil sample value, that includes the amount of hydroscopic water and the percentage of soil that passed through a 2 mm sieve. \n\n\n\\section{Calculations with $\\eta$ and $GS_w$}\n\n\\subsection{Calculating fluid viscosity, $\\eta$}\n\nThe fluid viscosity, $\\eta$, various with temperature. We will use a deterministic equation to estimate the viscosity:\n\n\\begin{equation}\n\\eta = C_1 + T * (C_2 + T * (C_3 + T *  (C_4 + T * C_5)))\n\\end{equation}\n\nwhere T is the fluid temperature ($^\\circ$ C),\n$C_1$ = 0.01732483379693,\n$C_2$ = -5.04157465609E-4\n$C_3$ = 8.387438669317E-6\n$C_4$ = -7.401129271698E-8\n$C_5$ = 2.625994080072E-12.\n\nThis equation is automatically implemented in the De function as described below. \n\n\\subsection{Calculating Fluid Density, $\\rho_f$)}\n\nSimilar to fluid viscosity, fluid density, $\\rho_f$ also changes with temperature,\n\n\\begin{equation}\nG_w = C1 + T * (C2 + T * (C3 + T * C4))\n\\end{equation}\n\nwhere T is temperature, \n$C_1$ = 0.99991003252,\n$C_2$ = 0.00005201921, \n$C_3$ = -0.00000751229, \n$C_4$ = -0.00000003605183,\n\n\n\n\nSome random example...\n\n\n\\subsection{Effective Particle Diameter Size, $D_e$}\n\n\\begin{equation}\nP_s = \\sqrt{\\frac{30*\\eta*l}{980*(G_s - G_w)*E_t}}\n\\end{equation}\n\n\\newpage\n\\subsection{$D_e$ using K}\n\n\\begin{equation}\nD_e = K \\sqrt{L/T}\n\\end{equation}\n\n\nCalculating K\n\n<<echo = T, label=K>>=\n\n@\n\nOne can easily use the function with the temperature and have K returned: \n\n<<>>=\n\n@\n\nCalculating L\n\n<<>>=\n\n@\n\nCalculating $D_e$\n\n\\begin{equation}\nD_e = K * sqrt{L/T}\n\\end{equation}\n\n<<echo=T, label=De_viaK>>=\n\n@\n\n\\subsection{Alternative Calculation w/o K}\n\n<<echo=T, label=eta_fun>>=\n# Fluid Viscosity\nC1 = 0.01732483379693\nC2 = -5.04157465609E-4\nC3 = 8.387438669317E-6\nC4 = -7.401129271698E-8\nC5 = 2.625994080072E-12\n\neta <- function(T){\nC1 + T * (C2 + T * (C3 + T * (C4 + T * C5)))\n} \n@\n\nNow, we calculate the fluid viscosity, $\\eta$, \n\n<<echo=T, label=eta_test>>=\neta(23)\n@\n\n\nAnd the specific gravity of water, $Gs_w$, \n\n<<echo=T, label=GS_w_function>>=\nGs_w <- function(T){\nC1 + T * (C2 + T * (C3 + T * C4))}\n@\n\n%id = 18\n\n%plot(de[id,], Pf[id,], ty='b', las=1, log='x', xaxt='n', xlim=c(1, 0.00001), ylab = \"Percent Finer\", xlab=\"Particle Size (mm)\", main='Particle Size Distribution', panel.first=grid())\n%ticks <- seq(-5, 0, by=1)\n%labels <- sapply(ticks, function(i) as.expression(bquote(10^ .(i))))\n%axis(1, at=c(0.00001, 0.0001, .001, 0.01, 0.1, 1.0), labels=labels)\n\n%# Minor Grids\n%# n <- n+2\n%#  minors <- log10(pretty(10^major.ticks[1:2],n))-major.ticks[1]\n%# minors <- minors[-c(1,n)]\n%# minor.ticks = c(outer(minors,major.ticks,`+`))\n%# minor.ticks <- minor.ticks[minor.ticks > mn & minor.ticks < mx]\n%# axis(ax,at=minor.ticks,tcl=par(\"tcl\")*t.ratio,labels=FALSE)\n\n%abline(v=0.002, col='Red'); text(x = .0001, y = Pf[id,7], 'Clay', col='red', cex=1.25, pos=3)\n%abline(v=0.05, col='Blue'); text(x = .01, y = Pf[id,4], 'Silt', col='blue', cex=1.25, pos=1)\n%abline(v=2.0, col='Green'); text(x = 0.50, y = Pf[id,1], 'Sand', col='green', cex=1.25, pos=1)\n\n\n%#sand = approx(x, y = NULL, xout, method = \"linear\", n = 50, yleft, yright, rule = 1, f = 0, ties = mean)",
    "created" : 1471066535516.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "170177304",
    "id" : "325B148",
    "lastKnownWriteTime" : 1470956029,
    "last_content_update" : 1470956029,
    "path" : "~/github/SOPs/32_Soil_Texture_Analysis/Guidelines/Appendix_B.Rnw",
    "project_path" : "32_Soil_Texture_Analysis/Guidelines/Appendix_B.Rnw",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}