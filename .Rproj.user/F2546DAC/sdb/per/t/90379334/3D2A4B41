{
    "collab_server" : "",
    "contents" : "%SOP Template \n% Version 02 Added revision date\n% Version 03 Added TOC and acknowledgements\n%           New SOP3_alpha.cls\n\n\\documentclass[12pt]{../SOP3_beta}\n\n\\author{Marc Los Huertos \\& Isaac Medina}\n\\title{Rstudio Projects and Github}\n\\date{8/12/2016}\n\\approved{TBD}\n\\ReviseDate{\\today}\n\\SOPno{06 v.03}\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n\\maketitle\n\n\\section{Scope and Application}\n\n\\NP R, RStudio, and Github combine as a resource for data analysis and display.\n\n\\NP We explain how these resources can be set up to create collaborative projects using Github repositories. \n\n\\NP We do not expect you to be an expert on how to use R or Rstudio. However, some experience with a computer language will be helpful. \n\n\\section{Summary of Method}\n\n\\NP This SOP does provides instructions to create Rstudio projects and obtain github repositories into Rstudio. \n\n\\NP The SOP also provides some guidance on how to trouble should push/pull problems as the arise.\n\n\\NP The use of Github is not intuitive. So, you will find many on-line resources to help.\n\n\\tableofcontents\n\n\\newpage\n\n\\section{Acknowledgements}\n\nAs usual we acknowledge the students who have tried to follow and made suggestions in how to improve this guide. In particular, Aparna C, etc.\n\n\\section{Definitions}\n\n\\NP RStudio is use interface for R. Although R by itself is an amazing example of crowd sourcing, where a wide range of staticians and programmers have created a free programming environments with a robust range of statistical packages, the RStudio interface provides a user with the tools to track and publish their analysis process in an effecient and transparent way. \n\n\\NP Local Install versus Server --- R and RStudio can be installed on a local computer/laptop from the CRAN download mirror sites. However, we also have access to the R and RStudio Server installed on the Pomona College mainframe, where you can access it via a web browser. Wow, this is conveient!\n\n\\NP GitHub is a web-based Git repository hosting service. \n\n\\NP Version Control is a method to track changes in software, and often in the context of collaborative projects. The final component of R and RStudio is its capacity to create projects (RStudio's terminology) and repositories (Github's terminalogy) that can be shared among collaborators. In particular, the collaboration allows for contributions to be tracked via version control tools. There are a number of ways that we can access these tools, but we'll try to limit the methods so keep the process relatively ``simple''.\n\n\n\\section{Background}\n\n\\NP R is a powerful, open source program but combined with RStudio and Github the program becomes an archetype of a program that enables 1) collaboration, 2) transparency, and 3) accessibility.\n\n\\NP However, becoming facile in using these program is like learning how to walk. We need to approach this process in descrete steps. Some will require weeks of mistakes to learn, others will quickly learn to run with the programs. How quickly you can feel comfortable with these programs will depend on many factors, but will be greatly improved by the time you invest!\n\n\\begin{description}\n  \\item[Almost Universal Compatibility] No downloading programs on personal computers.\n  \\item[Accessibility] Accessible from any computer via webserver\n  \\item[Collaboration] You can easily collaboration with others and track who contributed to which section\n  \\item[Version Control] When you are working in a team, and updating various codes, it's nice to have a way to ensure there is version control. \n\\end{description}\n\n\\NP I recommend reading the following sites to better understand Git and Github\n\n\\begin{itemize}\n  \\item \\href{https://www.youtube.com/watch?v=uHYcDQDbMY8}{Rstudio Youtube}\n  \\item \\href{https://www.youtube.com/watch?v=0fKg7e37bQE}{Github Youtube}\n  \\item \\href{http://product.hubspot.com/blog/git-and-github-tutorial-for-beginners}{Github for Beginners}\n  \\item \\href{http://scottchacon.com/2011/08/31/github-flow.html}{Github Fw}\n  \\item \\href{https://guides.github.com/introduction/flow/}{Understanding the GitHub Flow}\n  \\item \\href{http://blog.osteele.com/posts/2008/05/my-git-workflow/}{http://blog.osteele.com/posts/2008/05/my-git-workflow/}\n  \n\\end{itemize}\n\n\n\\section{Interferences}\n\n\\NP R has an updated version about every six months. When performing advanced analyses, there are times that new versions will no longer run a code. Thus, older versions of R must be maintained. This is a unheard of issue for new users.\n\n\\NP RStudio Server needs a functional network connection. If the network is down, then Rstudio Server is inaccessible. This can be a source of frustration. \n\n\\section{Health and Safety}\n\n\\NP Some risks include carpel tunnel syndrome. \n\n\n\\subsection*{Safety and Personnnel Protective Equipment}\n\n\\NP Good posture and well designed work station\n\n\\section{Personnel \\& Training Responsibilities}\n\n\\NP Researchers training before this the procedures in this method should include how to use their webbrowser and file storage practices. \n\n%\\NP Researchers using this SOP should be trained for the following SOPs:\n\n\\section{Required Materials and Apparati}\n\n\\NP Laptop or destop computer\n\n\\NP Access to Pomona College's SSO and server\n\n\\NP Github account\n\n\\NP Patience\n\n%\\section{Reagents and Standards}\n\n\\section{Estimated Time}\n\n\\NP This set up procedure requires 45 minutes.\n\n%\\section{Maintaing XX Data}\n\n\n\\section{Setting Up Accounts and Communications Keys}\n\n\\NP Create Github Account: Go to \\href{http:\\\\github.com}{Github.com} and create an account. I suggest you use your Claremont e-mail adddress because this can come in handy later, should you want to create private repositories, which are free for college students! Your email address can be used to prove your student status.\n  \n\\NP We have two choices in how we work with R. We can use the server version on Pomona's IT server. This is preferable. However, there are times when this is not possible --- and there are work-arounds!  Namely, we can download and install the following programs in this order: \n\n\\begin{enumerate}\n  \\item R \n  \\item RStudio\n  \\item Github desktop\n\\end{enumerate}\n\n\\NP Using Rstudio Server, open a browser and search for ``Pomona R studio server'' and you should find a link to login. Login using your Pomona College username and password.\n\n\\NP Using Rstudio desktop, start R Studio from the program files and this will automatically start an R console window.\n\n\\subsection{Creating a Connection between Github and RStudio}\n\n\\NP Open Rstudio -- which can be either as a local installation or using an Rstudio Server via webbrowser.\n\n\\NP To use Rstudio's version control, you must create a SSH Key that is used to open a secure connections between RStudio and Github.\n\n\\NP To create a Key, follow the Rstudio menus Tools/Global Option and navigate to the `Git/SVN' in the left menu.\n\n\\NP ``Create RSA key''. \n\n\\begin{figure}\n\\includegraphics{graphics/CreatingSSH.jpg}\n\\caption{After natigating through the Rstudio Git/SNV menu, select `Create an RSA Key'.}\n\\end{figure}\n\n\\NP You have the option to create a passphrase. I suggest you don't to make it easier for now. But should your have projects that need security, this this is a good idea.\n\n\\NP After you hit the ``Okay'' botton a image will be generated in a pop-up window -- As far as I can tell, this image is some sort of encryption thing -- but I don't see any reason why we should care. So, close this pop-up window. \n\n\\NP Next, select the `View the public key' and copy the contents of the pop-up window using cntrl-c. Now we need to paste that key into Github. NOTE: If you closed all the windows, you have to nagivate back to the Git/SVN menu via Global Options. \n\n\\NP Add RSA/SSH Key to Github\n  \\begin{enumerate}\n  \\item Go to Profile, in the upper right top of the Github page. Unless you have uploaded a picture of yourself, profile image is a tetris looking icon.\n  \\item Select the menu item ``Settings.''\n  \\item Using the left menu, select the ``SSH and GPG keys'' button.\n  \\item Click on new SSH key, type in name of key (e.g. 'myRstudio SSH key')\n  \n\\begin{figure}\n\\includegraphics{graphics/Github_SavedSSH.jpg}\n\\caption{Creating the connection between Rstudio and Gitub requires a `key'. We generate the key in Rstudio and then we tell Github what the key is.}\n\\end{figure}\n\n  \\item Paste in the RSA key, from your clipboard, into the window below.\n  \\item Hit green ``add SSH key'' button.\n  \\item Github and R can now communicate.\n  \\end{enumerate}\n\n\n\\subsection{Linking an RStudio Project to a Github Repository}\n\n\\NP To link a Github respository in Rstudio, you will need to ``clone'' the site, while we create a new project in R studio.\n\n\\NP I have created a simple repository to begin learning how to use R Studio.\n\n\\NP Search Github for the following repository name, 'beginnersluck'. There are several, so you'll have to find the one I created, under the username, 'marclos'. \n\n\\NP Select this repository. Note the 'README.md', click on it to view it. The suffix, md, referrs to markdown, which is a simple languague for things to display on the web.\n\n\\NP We need to get the url and SSH key for Rstudio and to accomplish this we ``Clone'' the Github repository. Click on the ''clone or download'' button (Figure \\ref{fig:step1}).\n\n\\begin{figure}\n\\includegraphics{graphics/CloningGithub.jpg}\n\\caption{Step 1: Select the green button, \"Clone or Download\"}\n\\label{fig:step1}\n\\end{figure}\n\n\\NP Next we will 'Clone with SSH'. If the header says 'Clone with HTTPS', you can toggle the selection with the small 'Use SSH' link in the upper right of the box. Hou can copy the clone information by clicking on the little clipboard on the right of the address (Figure \\ref{fig:step2}).\n\n\\begin{figure}\n\\includegraphics{graphics/CloningGithub2.jpg}\n\\caption{Step 2: Be sure you clone with SSH!}\n\\label{fig:step2}\n\\end{figure}\n\n\\NP Now we return to Rstudio and create a new project. Navigate to the file toolbar and select ``New Project''. Where you will be greeted with three choices (Figure \\ref{fig:step3}). Select 'Version Control'. \n\\begin{figure}\n\\includegraphics{graphics/RstudioNewProject.jpg}\n\\caption{Step 3: When you create a new project, you have three choices. Select 'Version Control' to clone your repository.}\n\\label{fig:step3}\n\\end{figure}\n\n\\NP Once you have selected the Version Control, you have one more choice to make, luckily this is pretty easy, select ``Git'' (Figure \\ref{fig:step4}).\n\n\\begin{figure}\n\\includegraphics{graphics/RstudioNewProject2.jpg}\n\\caption{Step 4: Select ``Git'' to clone the repository.}\n\\label{fig:step4}\n\\end{figure}\n\nWhen you arrive in the ``Clone Git Repostory'' window, you can simply paste your clipboard into the Repository URL. This usually fills in the project directory name too. But if not, you can type in the name, in this case, \"beginnersluck\" (Figure \\ref{fig:step5}).\n\n\\begin{figure}\n\\includegraphics{graphics/RstudioNewProject3.jpg}\n\\caption{Step 5: You should have something useful in each of the boxes.}\n\\label{fig:step5}\n\\end{figure}\n\n\\NP For many new users, Rstudio may claim some problem establishing authenticity (Figure \\ref{fig:step6}). Type 'yes'. Then hit okay. I am not exactly sure why this step exists. \n\n\\begin{figure}\n\\includegraphics{graphics/Authenticity.jpg}\n\\caption{Step 6: You should have something useful in each of the boxes.}\n\\label{fig:step6}\n\\end{figure}\n\n\n\\NP Now you should see a few files from the repository on your Rstudio window. Open them up and see what they are to get familiar with them.\n\n\\subsection{Pulling a Repository}\n\n\\NP The easiest place to begin, is to `Pull' a repository. But first you need to create a project in Rstudio. I suggest you the following steps as you begin:\n\n\\subsection{Pulling a Repository}\n\n\\NP Pulling a Repository is downloading all the changed files into your local (or server) directory. Using the downward facing blue arrow that labeled ``Pull'' in the Git tab in Rstudio.\n\n\\subsection{Creating a New Repository}\n\n\\NP Creating a respository in Github is pretty easy, but there are a couple of decision points worth pointing out.\n\n\\NP Click on the green ``New Repository'' button.\n\n\\NP A new page comes up and provides space for the name of the new repository. If you leave spaces, Github will automatically insert dashes between the words.\n\n\\NP Decide if you want the site to be public or private. NOTE: Usually to get a private site, you have to pay, however, you can apply for an academic account where you can have private accounts. \n\n\\NP Check the box if you want a README.md file created. I always create one -- you can do it later, but it's nice to document what you are doing, so I suggest you create one.\n\n\\NP Some files are not worth push and pulling all the time, but these files depend on the program you are using. In this case, we can have github ignore all files that are associated with R that don't really contribute to the project itself. So, I suggest you add these files to the .ignore file. \n\n\\NP Finally, Github allows you to create a licence to protect your work. I need to do some research about the differences, but I usually pick 'GNU General Public Licence' for no good reason, besides it sounds good.\n\n\\subsection{Creating a New Project}\n\n\n\\section{Working on Projects}\n\n\\subsection{Rstudio Panels}\n\n\\begin{description}\n  \\item[File Structure and Rnw/Tex files]\n  \\item[Console and Compile PDF windows]\n  \\item[Git Panel]\n\\end{description}\n\n\n\\subsection{Best Practices}\n\n\\begin{description}\n  \\item[Pull] When you open RStudio, the first thing you should do is ``Pull'' from the repository to ensure your files are up-to-date. When you \"Pull\", you will get one of three results:\n  \n  \\begin{description}\n  \\item[Already up-to-date.] This means that your files have not been updated on the Github site since you last pulled the files. If you suspect someone has worked on the files, but are not getting those changes, it means that your collaborator has failed to ``Push'' these changes onto the repsository. If this is the case, you might need to go to the troubleshooting question to address this problem.\n  \\item[Successful Updates] If your files are successfully updated from the repository, you will see:\n  \nsummary of updates\n\nmaster 6038765 Started to explain set up procedures\n \n 5 files changed, 434 insertions(+), 8 deletions(-)\n \n create mode 100644 06\\_Rstudio\\_Github/Rstudio-and-Github-concordance.tex\n \n create mode 100644 06\\_Rstudio\\_Github/Rstudio-and-Github.log\n \n create mode 100644 06\\_Rstudio\\_Github/Rstudio-and-Github.pdf\n \n create mode 100644 06\\_Rstudio\\_Github/Rstudio-and-Github.tex\n \n \\item[Unsuccesful \"Pull\"]\n \n \n\\end{description}\n\n  \\item[Commit]\n  \\item[Push] As you might guess, when you ``Push'' you can also have several outcomes:\n\\begin{description}\n  \\item[Everything up-to-date] is certainly simple.   \\item[Successful ``Push'']\n  \n    \"To git@github.com:marclos/SOPs.git\n  \n   e2efe6f..0b18250  master -> master\"\n   \\item[Unsuccessful \"Push\"]\n\\end{description}\n  \n  \nBasically git commit ``records changes to the repository'' while git push ``updates remote refs along with associated objects''. So the first one is used in connection with your local repository, while the latter one is used to interact with a remote repository.\n\nHere is a nice picture from Oliver Steele, that explains the git model and the commands:  \n\n\\begin{figure}\n\\includegraphics{graphics/MgaV9}\n\\end{figure}\n   \n\\end{description}\n\n\\section{Troubleshooting}\n\n\\NP At first when you're a newcomer to working on projects within Rstudio connected to a GitHub repository, you may forget the ``best practices`` of pulling, committing and pushing described above. You might have already gone through all the steps involved in setting up your GitHub account, linking your workspace in Rstudio with the correct project, and begun work on a specific file, but if you forget to update your workspace each time you come back to modify a file (especially in the case of coming back the next day to a file in Rstudio and forgetting to pull changes other collaborators may have made), you will run into problems committing, and pushing your changes. In this most common case, it's not likely that you'll notice any problems until you try to commit your changes. Thus, we'll begin this section on trouble shooting problems with Github and Rstudio at the committ level.\n\n\\NP Alternatively, if you and others edit the same section, Github is going to need some ``human'' decision making to negotiate these changes. In Github jargon, this requires one to 'merge' changes. \n\n\\NP (un)Fortunately, students are very good at discovering ways that the pull/commit/push process can be disrupted. As each case comes to my attention, I ask for a screen shot and a description, so we can trouble shoot each problem when they present themselves.\n\n\\subsection{`Commit'problems}\n\\NP In the scenario described above, you will get an error code when trying to committ your new changes to a file. \n\n\\subsection{`Merge' Errors}\n\n\\NP If you find merge errors it often means that you and someone else has modified a file and they need to be reconciled.\n\n\\begin{figure}\n\\includegraphics{graphics/UnmergedError.jpg}\n\\end{figure}\n\n\\NP Before trying to commit changes, We need to merge changes in the work tree. \n\n\\NP To do this go to the list in the upper right hand corner of workspace in Rstudio studio (select the Git tab). In this list you should see your file changes, as well as other changes. \n\n\\NP Select the files that have blue squares with your initials. The important part is to find the places where there is a multiple squares (ie. Blue squares, orange squares and red squares). Multiple squares signify that those sections there were changes made to the file that over lap and there should be a U next to the checkbox on those lines. Click those checkboxes. \n\n\\NP Then commit and push changes. \n\n\\begin{figure}\n\\includegraphics{graphics/MergeError.jpg}\n\\end{figure}\n\n\\subsection{`Pull' is rejected}\n\n\\NP Merging changes... how??\n\n\\subsection{Dealing with non-fast-forward errors}\n\n\\NP Sometimes, Git can't make your change to a remote repository without losing commits. When this happens, your push is refused. If another person has pushed to the same branch as you, Git won't be able to push your changes.\n\n\\NP You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:\n\\begin{itemize}\n  \\item \\$ git fetch origin\n  \\item \\# Fetches updates made to an online repository\n  \\item \\$ git merge origin YOUR\\_BRANCH\\_NAME\n  \\item \\# Merges updates made online with your local work\n\\end{itemize}\n\n\\NP Or, you can simply use git pull to perform both commands at once:\n\n\n\\subsection{`Push` fails}\n\n\\NP Below are several potential remedies:\n\n\\begin{description}\n  \\item[merge] asdfasdf\n  \n  \\item[Deleting a Project in R Studio]If you are willing to sacrifice the changes you made or have mailed them to a collaborator to deal with you can delete the entire project in Rstudio. To accomplish this delete all files in directory, clear workspace and console, don't save, then go to session tab: Terminate R, and hopefully that will do the trick. Then commence with starting a new project. \n\n\\end{description}\n\n%\\section{Data Analysis and Calculations}\n\n%\\section{QC/QA Criteria}\n\n\\section{Collaboration and Version Control}\n\n\\subsection{Workflow tracking}\n\n\\NP Collaborators can create ways that each one is responsible for certain activities..\n\n\\NP Branching...\n\n\n\\section{References}\n\n\\NP \n\n\n\n\n\n\\end{document}",
    "created" : 1473261172596.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2583644594",
    "id" : "3D2A4B41",
    "lastKnownWriteTime" : 1473367967,
    "last_content_update" : 1473367967901,
    "path" : "~/github/SOPs/06_Rstudio_Github/Rstudio-and-Github_v03.Rnw",
    "project_path" : "06_Rstudio_Github/Rstudio-and-Github_v03.Rnw",
    "properties" : {
        "chunk_rendered_width" : "597"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}