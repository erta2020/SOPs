%SOP Template 
% Version 02 Added revision date
% Version 03 Added TOC and acknowledgements
%           New SOP3_alpha.cls


\documentclass[12pt]{../SOP3_beta}

\author{Marc, Aparna, and Isaac}
\title{Rstudio Projects and Github}
\date{8/12/2016}
\approved{TBD}
\ReviseDate{\today}
\SOPno{06 v.01}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

\section{Scope and Application}

\NP R, RStudio, and Github combine as a resource for data analysis and display.

\NP We explain how these resources can be set up to create collaborative projects using Github repositories. 

\NP We do not expect you to be an expert on how to use R or Rstudio. However, some experience with a computer language will be helpful. 

\section{Summary of Method}

\NP This SOP does this...


\NP The use of Github is not intuitive. So, you will find many on-line resources to help.

\tableofcontents

\newpage

\section{Acknowledgements}

\section{Definitions}

\NP RStudio is use interface for R. Although R by itself is an amazing example of crowd sourcing, where a wide range of staticians and programmers have created a free programming environments with a robust range of statistical packages, the RStudio interface provides a user with the tools to track and publish their analysis process in an effecient and transparent way. 

\NP Local Install versus Server --- R and RStudio can be installed on a local computer/laptop from the CRAN download mirror sites. However, we also have access to the R and RStudio Server installed on the Pomona College mainframe, where you can access it via a web browser. Wow, this is conveient!

\NP GitHub is a web-based Git repository hosting service. 

\NP Version Control is a method to track changes in software, and often in the context of collaborative projects. The final component of R and RStudio is its capacity to create projects (RStudio's terminology) and repositories (Github's terminalogy) that can be shared among collaborators. In particular, the collaboration allows for contributions to be tracked via version control tools. There are a number of ways that we can access these tools, but we'll try to limit the methods so keep the process relatively ``simple''.


\section{Background}

\NP R is a powerful, open source program but combined with RStudio and Github the program becomes an archetype of a program that enables 1) collaboration, 2) transparency, and 3) accessibility.

\NP However, becoming facile in using these program is like learning how to walk. We need to approach this process in descrete steps. Some will require weeks of mistakes to learn, others will quickly learn to run with the programs. How quickly you can feel comfortable with these programs will depend on many factors, but will be greatly improved by the time you invest!

\begin{description}
  \item[Almost Universal Compatibility] No downloading programs on personal computers.
  \item[Accessibility] Accessible from any computer via webserver
  \item[Collaboration]
  \item[Version Control]
\end{description}

\NP I recommend reading the following sites to better understand Git and Github

\begin{itemize}
  \item \href{https://www.youtube.com/watch?v=uHYcDQDbMY8}{Rstudio Youtube}
  \item \href{https://www.youtube.com/watch?v=0fKg7e37bQE}{Github Youtube}
  \item \href{http://product.hubspot.com/blog/git-and-github-tutorial-for-beginners}{Github for Beginners}
  \item \href{http://scottchacon.com/2011/08/31/github-flow.html}{Github Fw}
  \item \href{https://guides.github.com/introduction/flow/}{Understanding the GitHub Flow}
  \item \href{http://blog.osteele.com/posts/2008/05/my-git-workflow/}{http://blog.osteele.com/posts/2008/05/my-git-workflow/}
  
\end{itemize}


\section{Interferences}

\NP R has an updated version about every six months. When performing advanced analyses, there are times that new versions will no longer run a code. Thus, older versions of R must be maintained. This is a unheard of issue for new users.

\NP RStudio Server needs a functional network connection. If the network is down, then Rstudio Server is inaccessible. This can be a source of frustration. 

\section{Health and Safety}

\NP Some risks include carpel tunnel syndrome. 


\subsection*{Safety and Personnnel Protective Equipment}

\NP Good posture and work station

\section{Personnel \& Training Responsibilities}

\NP Researchers training is required before this the procedures in this method can be used... 

%\NP Researchers using this SOP should be trained for the following SOPs:

\section{Required Materials and Apparati}

\NP Laptop or destop computer

\NP Access to Pomona College's SSO and server

\NP Github account

\NP Patience

%\section{Reagents and Standards}

\section{Estimated Time}

\NP This set up procedure requires 30 minutes.

%\section{Maintaing XX Data}


\section{Setting Up Accounts and Communications Keys}

\NP Create Github Account: Go to \href{http:\\github.com}{Github.com} and create an account. I suggest you use your Claremont e-mail adddress because this can come in handy later, should you want to create private repositories, which are free for college students! Your email address can be used to prove your student status.
  
\NP Read the Readme file -- THIS DOCUMENT WILL REPLACE THAT README FILE.

\subsection{Creating a Connection between Github and RStudio}

\NP Open Rstuidio -- which can be either as a local installation or using an Rstudio Server via webbrowser.

\NP To use Rstudio's version control, you must create a SSH Key that is used to open a secure connections between RStudio and Github.

\NP To create a Key, follow the Rstudio menus Tools/Global Options/`Git/SVN' and select ``Create RSA key''. 

\begin{figure}
\includegraphics{graphics/CreatingSSH.jpg}
\caption{After natigating throught the Rstudio menu, select `Create an RSA Key'.}
\end{figure}

\NP You will have the option to create a passcode. I suggest you don't to make it easier for now. But when you have projects that you be worried about secturity, then it is a good idea.
\NP The a crude image will be generated in a pop-up windows -- that we don't care about as far as I can tell. So, close this window. 

\NP Next, select the `View the public key' and copy the contents of the pop-up window using cntrl-c. Now we need to paste that key into Github.

\begin{figure}
\includegraphics{graphics/Github_SavedSSH.jpg}
\caption{Creating the connection between Rstudio and Gitub requires a `key'. From this spot, you can create a new key and then name it based on the topic that you are working in. }
\end{figure}

\NP Add SSH Key to Github
  \begin{enumerate}
  \item Go to Profile, in the upper right top of the Github page.
  \item Select the menu item ``Settings.''
  \item Using the left menu, select the ``SSH and GPG keys'' button.
  \item Click on new SSH key, type in name of key (e.g. 'myRstudio SSH key')
  \item Paste in the RSA key, from your clipboard, into the window below.
  \item Hit green ``add SSH key'' button.
  \end{enumerate}
  
\NP Now Github and R can communicate. 

\NP To obtain access to respository in Rstudio, you will need to ``clone'' the site as a new project in Rstudio. To accomplish this...

\subsection{Pulling a Repository}

\NP The easiest place to begin, is to `Pull' a repository. But first you need to create a project in Rstudio. I suggest you the following steps as you begin:

Use the following Beginners\_Repository,

\url{https://github.com/marclos/beginnersluck}

\begin{figure}
\includegraphics{graphics/CloningGithub.jpg}
\caption{Step 1 should look like this...}
\end{figure}

\begin{figure}
\includegraphics{graphics/CloningGithub2.jpg}
\caption{Step 1 should look like this...}
\end{figure}

\begin{figure}
\includegraphics{graphics/RstudioNewProject.jpg}
\caption{Step 1 should look like this...}
\end{figure}


\begin{figure}
\includegraphics{graphics/RstudioNewProject2.jpg}
\caption{Step 1 should look like this...}
\end{figure}

\begin{figure}
\includegraphics{graphics/RstudioNewProject3.jpg}
\caption{Step 1 should look like this...}
\end{figure}

\subsection{Creating a New Repository}

\subsection{Creating a New Project}


\section{Working on Projects}

\subsection{Rstudio Panels}

\begin{description}
  \item[File Structure and Rnw/Tex files]
  \item[Console and Compile PDF windows]
  \item[Git Panel]
\end{description}


\subsection{Best Practices}

\begin{description}
  \item[Pull] When you open RStudio, the first thing you should do is "Pull" from the repository to ensure your files are up-to-date. When you "Pull", you will get one of three results:
  
  \begin{description}
  \item[Already up-to-date.] This means that your files have not been updated on the Github site since you last pulled the files. If you suspect someone has worked on the files, but are not getting those changes, it means that your collaborator has failed to "Push" these changes onto the repsository. If this is the case, you might need to go to the troubleshooting question to address this problem.
  \item[Successful Updates] If your files are successfully updated from the repository, you will see:
  
summary of updates

master 6038765 Started to explain set up procedures
 
 5 files changed, 434 insertions(+), 8 deletions(-)
 
 create mode 100644 06\_Rstudio\_Github/Rstudio-and-Github-concordance.tex
 
 create mode 100644 06\_Rstudio\_Github/Rstudio-and-Github.log
 
 create mode 100644 06\_Rstudio\_Github/Rstudio-and-Github.pdf
 
 create mode 100644 06\_Rstudio\_Github/Rstudio-and-Github.tex
 
 \item[Unsuccesful "Pull"]
 
 
\end{description}

  \item[Commit]
  \item[Push] As you might guess, when you "Push" you can also have several outcomes:
\begin{description}
  \item[Everything up-to-date] is certainly simple.   \item[Successful "Push"]
  
    "To git@github.com:marclos/SOPs.git
  
   e2efe6f..0b18250  master -> master"
   \item[Unsuccessful "Push"]
\end{description}
  
  
Basically git commit ``records changes to the repository'"'' while git push ``updates remote refs along with associated objects''. So the first one is used in connection with your local repository, while the latter one is used to interact with a remote repository.

Here is a nice picture from Oliver Steele, that explains the git model and the commands:  

\begin{figure}
\includegraphics{graphics/MgaV9}
\end{figure}
   
\end{description}

\section{Troubleshooting}

\NP At first when you're a newcomer to working on projects within Rstudio connected to a GitHub repository, you may forget the "best practices" of pulling, committing and pushing described above. You might have already gone through all the steps involved in setting up your GitHub account, linking your workspace in Rstudio with the correct project, and begun work on a specific file, but if you forget to update your workspace each time you come back to modify a file (especially in the case of coming back the next day to a file in Rstudio and forgetting to pull changes other collaborators may have made), you will run into problems committing, and pushing your changes. In this most common case, it's not likely that you'll notice any problems until you try to commit your changes. Thus, we'll begin this section on trouble shooting problems with Github and Rstudio at the committ level.

\NP Alternatively, if you and others edit the same section, Github is going to need some ``human'' decision making to negotiate these changes. In Github jargon, this requires one to 'merge' changes. 

\NP (un)Fortunately, students are very good at discovering ways that the pull/commit/push process can be disrupted. As each case comes to my attention, I ask for a screen shot and a description, so we can trouble shoot each problem when they present themselves.

\subsection{"Commit" problems}
\NP In the scenario described above, you will get an error code when trying to committ your new changes to a file. 

\subsection{'Merge' Errors}

\begin{figure}
\includegraphics{graphics/UnmergedError.jpg}
\end{figure}

\begin{figure}
\includegraphics{graphics/MergeError.jpg}
\end{figure}

\subsection{"Pull" is rejected}

\NP Merging changes... how??

\subsection{Dealing with non-fast-forward errors}

\NP Sometimes, Git can't make your change to a remote repository without losing commits. When this happens, your push is refused. If another person has pushed to the same branch as you, Git won't be able to push your changes.

\NP You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally:
\begin{itemize}
  \item \$ git fetch origin
  \item \# Fetches updates made to an online repository
  \item \$ git merge origin YOUR\_BRANCH\_NAME
  \item \# Merges updates made online with your local work
\end{itemize}

\NP Or, you can simply use git pull to perform both commands at once:


\subsection{"Push" fails}

\NP Below are several potential remedies:

\begin{description}
  \item[merge] asdfasdf
  
  \item[Deleting a Project in R Studio]If you are willing to sacrifice the changes you made or have mailed them to a collaborator to deal with you can delete the entire project in Rstudio. To accomplish this delete all files in directory, clear workspace and console, don't save, then go to session tab: Terminate R, and hopefully that will do the trick. Then commence with starting a new project. 

\end{description}

%\section{Data Analysis and Calculations}

%\section{QC/QA Criteria}

\section{Collaboration and Version Control}

\subsection{Workflow tracking}

\NP Collaborators can create ways that each one is responsible for certain activities..

\NP Branching...


\section{References}

\NP APHA, AWWA. WEF. (2012) Standard Methods for examination of water and wastewater. 22nd American Public Health Association (Eds.). Washington. 1360 pp. (2014).





\end{document}